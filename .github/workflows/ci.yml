name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Test & Verify Installation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Verify CLI entry point
      run: |
        audit-packages --help

    - name: Verify direct script execution
      run: |
        python -m audit_packages_tool --help

    - name: Run linting
      run: |
        ruff check
        ruff format --check

    - name: Run type checking
      run: |
        mypy src/

    - name: Run tests with coverage
      run: |
        pytest --cov=src/audit_packages_tool --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Verify package structure
      run: |
        python -c "import audit_packages_tool; print('✅ Package import successful')"
        python -c "from audit_packages_tool.scanner import PackageAuditor; print('✅ PackageAuditor import successful')"
        python -c "from audit_packages_tool.models import PackageInfo; print('✅ PackageInfo import successful')"

  security:
    name: Security & Dependency Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        pip install safety
        safety check --json || true

  package-build:
    name: Package Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Verify package contents
      run: |
        tar -tf dist/*.tar.gz | grep -E "(models|scanner|reporting|cli\.py|pyproject\.toml)"

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        audit-packages --help
